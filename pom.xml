<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>sql</groupId>
    <artifactId>generator</artifactId>
    <version>0.0.1</version>

    <name>sql-generator</name>
    <description>数据库表实体生成</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <!-- MySQL Connector -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.28</version>
        </dependency>

        <!-- MyBatis Generator -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.7</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!--添加mybatis generator maven插件-->
<!--            <plugin>-->
<!--                <groupId>org.mybatis.generator</groupId>-->
<!--                <artifactId>mybatis-generator-maven-plugin</artifactId>-->
<!--                <version>1.4.0</version>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;generatorConfig.xml位置&ndash;&gt;-->
<!--                    <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>-->
<!--                    <verbose>true</verbose>-->
<!--                    <overwrite>true</overwrite>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>Generate MyBatis Artifacts</id>-->
<!--                        <goals>-->
<!--                            <goal>generate</goal>-->
<!--                        </goals>-->
<!--                        <phase>generate-sources</phase>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                &lt;!&ndash;此处必须添加mysql驱动包&ndash;&gt;-->
<!--                <dependencies>-->
<!--                    &lt;!&ndash; https://mvnrepository.com/artifact/mysql/mysql-connector-java &ndash;&gt;-->
<!--                    <dependency>-->
<!--                        <groupId>mysql</groupId>-->
<!--                        <artifactId>mysql-connector-java</artifactId>-->
<!--                        <version>8.0.18</version>-->
<!--                    </dependency>-->
<!--                    <dependency>-->
<!--                        <groupId>sql</groupId>-->
<!--                        <artifactId>generator</artifactId>-->
<!--                        <version>0.0.1</version>-->
<!--                    </dependency>-->
<!--                </dependencies>-->
<!--            </plugin>-->

            <!-- ProGuard混淆插件-->
<!--            <plugin>-->
<!--                <groupId>com.github.wvengen</groupId>-->
<!--                <artifactId>proguard-maven-plugin</artifactId>-->
<!--                <version>2.1.0</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        &lt;!&ndash; 混淆时刻，这里是打包的时候混淆&ndash;&gt;-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            &lt;!&ndash; 使用插件的什么功能，当然是混淆&ndash;&gt;-->
<!--                            <goal>proguard</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    <proguardVersion>6.0.3</proguardVersion>-->
<!--                    &lt;!&ndash; 是否将生成的PG文件安装部署&ndash;&gt;-->
<!--                    <attach>true</attach>-->
<!--                    &lt;!&ndash; 是否混淆&ndash;&gt;-->
<!--                    <obfuscate>true</obfuscate>-->
<!--                    &lt;!&ndash; 指定生成文件分类 &ndash;&gt;-->
<!--                    <attachArtifactClassifier>pg</attachArtifactClassifier>-->
<!--                    <options>-->
<!--                        &lt;!&ndash; JDK目标版本1.8&ndash;&gt;-->
<!--                        <option>-target 1.8</option>-->
<!--                        &lt;!&ndash; 不做收缩（删除注释、未被引用代码）&ndash;&gt;-->
<!--                        <option>-dontshrink</option>-->
<!--                        &lt;!&ndash; 不做优化（变更代码实现逻辑）&ndash;&gt;-->
<!--                        <option>-dontoptimize</option>-->
<!--                        &lt;!&ndash; 不路过非公用类文件及成员&ndash;&gt;-->
<!--                        <option>-dontskipnonpubliclibraryclasses</option>-->
<!--                        <option>-dontskipnonpubliclibraryclassmembers</option>-->
<!--                        &lt;!&ndash; 确定统一的混淆类的成员名称来增加混淆&ndash;&gt;-->
<!--                        <option>-useuniqueclassmembernames</option>-->
<!--                        &lt;!&ndash;不用大小写混合类名机制&ndash;&gt;-->
<!--                        <option>-dontusemixedcaseclassnames</option>-->

<!--                        &lt;!&ndash; 优化时允许访问并修改有修饰符的类和类的成员 &ndash;&gt;-->
<!--                        <option>-allowaccessmodification</option>-->
<!--                        &lt;!&ndash; 不混淆所有包名&ndash;&gt;-->
<!--                        <option>-keeppackagenames</option>-->
<!--                        <option>-keepparameternames</option>-->

<!--                        &lt;!&ndash; 不混淆包下的所有类名，且类中的方法也不混淆&ndash;&gt;-->
<!--                        <option>-keep class com.*Application {*;}</option>-->
<!--                        &lt;!&ndash; 需要保持的属性：异常，注解等&ndash;&gt;-->
<!--                        <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,Synthetic,EnclosingMethod</option>-->
<!--                        <option>-ignorewarnings</option>-->

<!--                    </options>-->

<!--                    &lt;!&ndash; 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 &ndash;&gt;-->
<!--                    <libs>-->
<!--                        <lib>${java.home}/lib/rt.jar</lib>-->
<!--                    </libs>-->
<!--                    &lt;!&ndash; 对什么东西进行加载，这里仅有classes成功&ndash;&gt;-->
<!--                    <injar>classes</injar>-->
<!--                    &lt;!&ndash; 输出目录&ndash;&gt;-->
<!--                    <outputDirectory>${project.build.directory}</outputDirectory>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>

</project>
